#version 450

struct Particle
{
    vec2 position;
    vec2 velocity;
    vec4 colour;
};

layout(binding = 0) uniform ParticleUBO
{
    float delta_time;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn
{
    Particle in_particles[];
};

layout(std140, binding = 2) buffer ParticleSSBOOut
{
    Particle out_particles[];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint index = gl_GlobalInvocationID.x;
    out_particles[index].position += in_particles[index].position + in_particles[index].velocity * ubo.delta_time;
    vec2 new_velocity = in_particles[index].velocity;
    if(in_particles[index].position.x > 1.0 || in_particles[index].position.x < -1.0f)
    {
        new_velocity.x = 0.0 - new_velocity.x;
    }

    if(in_particles[index].position.y > 1.0 || in_particles[index].position.y < -1.0f)
    {
        new_velocity.y = 0.0 - new_velocity.y;
    }

    out_particles[index].velocity = new_velocity;
    out_particles[index].colour = in_particles[index].colour;
}