#include "lvk/Texture.h"
#include "ThirdParty/stb_image.h"
#include "lvk/Buffer.h"
#include "lvk/Commands.h"
#include "lvk/Utils.h"
#include "volk.h"

lvk::Texture* lvk::Texture::g_DefaultTexture = nullptr;

static constexpr uint32_t p_DefaultTextureBytesPNG_Length = 4024;
static unsigned char p_DefaultTextureBytesPNG[] = {
  0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x06, 0x00, 0x00, 0x00, 0x5c, 0x72, 0xa8,
  0x66, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x13, 0x00, 0x00, 0x0b,
  0x13, 0x01, 0x00, 0x9a, 0x9c, 0x18, 0x00, 0x00, 0x0f, 0x6a, 0x49, 0x44, 0x41, 0x54, 0x78, 0x01,
  0xed, 0x9d, 0xb1, 0x71, 0x5c, 0xc9, 0x0e, 0x45, 0xa5, 0x5f, 0xb2, 0x14, 0x81, 0x62, 0x50, 0x14,
  0x93, 0x81, 0x3c, 0x3a, 0x8c, 0x42, 0x19, 0x30, 0x83, 0x8d, 0x82, 0xce, 0x78, 0x4c, 0x86, 0x31,
  0x28, 0x02, 0xb9, 0xfa, 0x85, 0x5f, 0xf5, 0xa7, 0x2e, 0xe1, 0xec, 0xe0, 0x35, 0x1e, 0x20, 0xf4,
  0x9c, 0x75, 0x76, 0x50, 0xea, 0x07, 0x34, 0x0e, 0x1a, 0xb7, 0x40, 0x0b, 0x9f, 0x2f, 0x97, 0xcb,
  0x9f, 0x4f, 0x8d, 0xff, 0x3d, 0x3d, 0x3d, 0x35, 0x46, 0xff, 0xf4, 0xe9, 0x7a, 0xbd, 0xb6, 0xc6,
  0x27, 0x7f, 0xea, 0xdf, 0xf9, 0x00, 0xff, 0xd3, 0x19, 0x9c, 0xd8, 0x10, 0x80, 0x40, 0x2f, 0x01,
  0x04, 0xa0, 0x97, 0x3f, 0xd1, 0x21, 0xd0, 0x4a, 0x00, 0x01, 0x68, 0xc5, 0x4f, 0x70, 0x08, 0xf4,
  0x12, 0x40, 0x00, 0x7a, 0xf9, 0x13, 0x1d, 0x02, 0xad, 0x04, 0x10, 0x80, 0x56, 0xfc, 0x04, 0x87,
  0x40, 0x2f, 0x01, 0x04, 0xa0, 0x97, 0x3f, 0xd1, 0x21, 0xd0, 0x4a, 0x00, 0x01, 0x68, 0xc5, 0x4f,
  0x70, 0x08, 0xf4, 0x12, 0x40, 0x00, 0x7a, 0xf9, 0x13, 0x1d, 0x02, 0xad, 0x04, 0x10, 0x80, 0x56,
  0xfc, 0x04, 0x87, 0x40, 0x2f, 0x01, 0x04, 0xa0, 0x97, 0x3f, 0xd1, 0x21, 0xd0, 0x4a, 0x00, 0x01,
  0x68, 0xc5, 0x4f, 0x70, 0x08, 0xf4, 0x12, 0x58, 0x16, 0x80, 0xd7, 0xf7, 0x9f, 0xad, 0x19, 0xfc,
  0x7a, 0xf9, 0xd1, 0x1a, 0xff, 0xfd, 0xeb, 0x6b, 0x6b, 0xfc, 0x97, 0x1f, 0xcd, 0xf9, 0xbf, 0x7e,
  0x6d, 0xcd, 0xff, 0xd7, 0x8f, 0x97, 0xd6, 0xf8, 0xaf, 0x3f, 0xdf, 0x5b, 0xe3, 0xff, 0x78, 0x59,
  0xcb, 0x7f, 0x59, 0x00, 0x5a, 0xb3, 0x27, 0x38, 0x04, 0x20, 0xb0, 0x44, 0x00, 0x01, 0x58, 0xc2,
  0xc7, 0xc7, 0x10, 0x98, 0x4d, 0xe0, 0xcb, 0x91, 0xeb, 0xfb, 0xb1, 0x5f, 0xed, 0xe7, 0xef, 0xff,
  0x1c, 0x71, 0x19, 0xfa, 0xc6, 0x8f, 0xfd, 0x6a, 0x7f, 0x7b, 0x79, 0x0b, 0xf9, 0x3a, 0x72, 0xd8,
  0x8f, 0xfd, 0x6a, 0x7f, 0xff, 0xfd, 0x7c, 0xc4, 0x65, 0xe8, 0x1b, 0x3f, 0xf6, 0xab, 0xfd, 0xf2,
  0x56, 0x90, 0xbf, 0x1b, 0xfb, 0xdf, 0xc5, 0xfe, 0xfe, 0xfc, 0x3b, 0x94, 0xcb, 0x91, 0xc3, 0x7e,
  0xec, 0x57, 0xfb, 0xdb, 0xdb, 0xcb, 0x11, 0x97, 0xa1, 0x6f, 0xfc, 0xd8, 0xaf, 0xf6, 0xf3, 0x3f,
  0xdf, 0x43, 0xbe, 0x8e, 0x1c, 0xf6, 0x63, 0xbf, 0xda, 0x6f, 0xc1, 0x3f, 0x09, 0x0e, 0x09, 0x80,
  0x36, 0xb9, 0x35, 0xbf, 0xda, 0x47, 0x12, 0x8a, 0x7e, 0xa3, 0x4d, 0x6e, 0xcd, 0xaf, 0x76, 0xd4,
  0xd7, 0x91, 0xf3, 0xda, 0xe4, 0xd6, 0xfc, 0x6a, 0x1f, 0xf1, 0x17, 0xfd, 0x46, 0x9b, 0xdc, 0x9a,
  0x5f, 0xed, 0xa8, 0xaf, 0x23, 0xe7, 0xb5, 0xc9, 0xad, 0xf9, 0xd5, 0x3e, 0xe2, 0x2f, 0xfa, 0x8d,
  0x36, 0xb9, 0x35, 0xbf, 0xda, 0x51, 0x5f, 0x47, 0xce, 0x6b, 0x93, 0x5b, 0xf3, 0xab, 0x7d, 0xc4,
  0x5f, 0xf4, 0x1b, 0x6d, 0x72, 0x6b, 0x7e, 0xb5, 0xa3, 0xbe, 0xf8, 0x13, 0x20, 0x4a, 0x8c, 0xf3,
  0x10, 0xd8, 0x88, 0x00, 0x02, 0xb0, 0x51, 0x31, 0x49, 0x05, 0x02, 0x51, 0x02, 0xcb, 0x02, 0x50,
  0x3d, 0xfe, 0xfb, 0x04, 0xab, 0xc7, 0x7f, 0x1f, 0xbf, 0x7a, 0xfc, 0xf7, 0xf1, 0xab, 0xc7, 0x7f,
  0x1f, 0xbf, 0x7a, 0xfc, 0xf7, 0xf1, 0xab, 0xc7, 0x7f, 0x1f, 0xbf, 0x7a, 0xfc, 0xf7, 0xf1, 0x57,
  0xc6, 0x7f, 0xf3, 0xb5, 0x2c, 0x00, 0xfe, 0x42, 0xd8, 0x10, 0x80, 0xc0, 0x1c, 0x02, 0x08, 0xc0,
  0x9c, 0x5a, 0x71, 0x53, 0x08, 0xa4, 0x13, 0x40, 0x00, 0xd2, 0x91, 0xe2, 0x10, 0x02, 0x73, 0x08,
  0x20, 0x00, 0x73, 0x6a, 0xc5, 0x4d, 0x21, 0x90, 0x4e, 0x00, 0x01, 0x48, 0x47, 0x8a, 0x43, 0x08,
  0xcc, 0x21, 0x80, 0x00, 0xcc, 0xa9, 0x15, 0x37, 0x85, 0x40, 0x3a, 0x01, 0x04, 0x20, 0x1d, 0x29,
  0x0e, 0x21, 0x30, 0x87, 0x00, 0x02, 0x30, 0xa7, 0x56, 0xdc, 0x14, 0x02, 0xe9, 0x04, 0x10, 0x80,
  0x74, 0xa4, 0x38, 0x84, 0xc0, 0x1c, 0x02, 0x08, 0xc0, 0x9c, 0x5a, 0x71, 0x53, 0x08, 0xa4, 0x13,
  0x40, 0x00, 0xd2, 0x91, 0xe2, 0x10, 0x02, 0x73, 0x08, 0x20, 0x00, 0x73, 0x6a, 0xc5, 0x4d, 0x21,
  0x90, 0x4e, 0xe0, 0x0b, 0xfb, 0xe9, 0xd9, 0x4f, 0x9f, 0xfe, 0xaa, 0x02, 0x0e, 0xaf, 0xd7, 0x6b,
  0xe0, 0x74, 0xfe, 0xd1, 0x47, 0x7f, 0xff, 0x4c, 0x00, 0xf9, 0x6f, 0x0a, 0x8f, 0x10, 0x18, 0x43,
  0x00, 0x01, 0x18, 0x53, 0x2a, 0x2e, 0x0a, 0x81, 0x7c, 0x02, 0x08, 0x40, 0x3e, 0x53, 0x3c, 0x42,
  0x60, 0x0c, 0x01, 0x04, 0x60, 0x4c, 0xa9, 0xb8, 0x28, 0x04, 0xf2, 0x09, 0x20, 0x00, 0xf9, 0x4c,
  0xf1, 0x08, 0x81, 0x31, 0x04, 0x10, 0x80, 0x31, 0xa5, 0xe2, 0xa2, 0x10, 0xc8, 0x27, 0x80, 0x00,
  0xe4, 0x33, 0xc5, 0x23, 0x04, 0xc6, 0x10, 0x40, 0x00, 0xc6, 0x94, 0x8a, 0x8b, 0x42, 0x20, 0x9f,
  0x00, 0x02, 0x90, 0xcf, 0x14, 0x8f, 0x10, 0x18, 0x43, 0x00, 0x01, 0x18, 0x53, 0x2a, 0x2e, 0x0a,
  0x81, 0x7c, 0x02, 0x08, 0x40, 0x3e, 0x53, 0x3c, 0x42, 0x60, 0x0c, 0x81, 0x65, 0x01, 0xd0, 0xc5,
  0x9c, 0x1d, 0x59, 0xeb, 0x62, 0xce, 0x8e, 0xf8, 0xba, 0x98, 0xb3, 0x23, 0xbe, 0x2e, 0xe6, 0xec,
  0x88, 0xaf, 0x8b, 0x39, 0x3b, 0xe2, 0xeb, 0x62, 0xce, 0x8e, 0xf8, 0xba, 0x98, 0xb3, 0x23, 0xfe,
  0x6a, 0xfe, 0xcb, 0x02, 0xd0, 0x91, 0x34, 0x31, 0x21, 0x00, 0x81, 0x1c, 0x02, 0x08, 0x40, 0x0e,
  0x47, 0xbc, 0x40, 0x60, 0x24, 0x81, 0x43, 0xeb, 0xc1, 0xfd, 0xd8, 0xaf, 0x76, 0xc5, 0xae, 0x3e,
  0x3f, 0xf6, 0xab, 0x5d, 0xb1, 0xab, 0xcf, 0x8f, 0xfd, 0x6a, 0x57, 0xec, 0xea, 0xf3, 0x63, 0xbf,
  0xda, 0x15, 0xbb, 0xfa, 0xfc, 0xd8, 0xaf, 0x76, 0xc5, 0xae, 0x3e, 0x3f, 0xf6, 0xaa, 0x5d, 0xb1,
  0xab, 0xcf, 0x8f, 0xfd, 0x6a, 0xaf, 0xee, 0xea, 0xbb, 0x47, 0x45, 0x34, 0x5f, 0x3b, 0xaf, 0x76,
  0x34, 0xff, 0x43, 0x02, 0xa0, 0x4d, 0x6e, 0xcd, 0xaf, 0xf6, 0x3d, 0x09, 0xac, 0x9e, 0xd1, 0x26,
  0xb7, 0xe6, 0x57, 0x7b, 0xd5, 0xf7, 0x3d, 0xdf, 0x6b, 0x93, 0x5b, 0xf3, 0xab, 0x7d, 0xcf, 0xf7,
  0xab, 0x67, 0xb4, 0xc9, 0xad, 0xf9, 0xd5, 0x5e, 0xf5, 0x7d, 0xcf, 0xf7, 0xda, 0xe4, 0xd6, 0xfc,
  0x6a, 0xdf, 0xf3, 0xfd, 0xea, 0x19, 0x7d, 0xe4, 0xf6, 0xf8, 0xd5, 0x5e, 0xf5, 0x7d, 0xcf, 0xf7,
  0xda, 0xe4, 0xd6, 0xfc, 0x6a, 0xdf, 0xf3, 0xfd, 0xea, 0x19, 0xcd, 0x77, 0x35, 0x7f, 0xfe, 0x04,
  0x58, 0xad, 0x06, 0xdf, 0x43, 0x60, 0x30, 0x01, 0x04, 0x60, 0x70, 0xf1, 0xb8, 0x3a, 0x04, 0x56,
  0x09, 0x2c, 0x0b, 0x40, 0xf5, 0xf8, 0xef, 0x13, 0xae, 0x1e, 0xff, 0x7d, 0xfc, 0xea, 0xf1, 0xdf,
  0xc7, 0xaf, 0x1e, 0xff, 0x7d, 0xfc, 0xea, 0xf1, 0xdf, 0xc7, 0xd7, 0x71, 0xd8, 0xff, 0x5b, 0x85,
  0x5d, 0x3d, 0xfe, 0xfb, 0x9c, 0x56, 0xf3, 0x5f, 0x16, 0x00, 0x7f, 0x21, 0x6c, 0x08, 0x40, 0x60,
  0x0e, 0x01, 0x04, 0x60, 0x4e, 0xad, 0xb8, 0x29, 0x04, 0xd2, 0x09, 0x20, 0x00, 0xe9, 0x48, 0x71,
  0x08, 0x81, 0x39, 0x04, 0x10, 0x80, 0x39, 0xb5, 0xe2, 0xa6, 0x10, 0x48, 0x27, 0x80, 0x00, 0xa4,
  0x23, 0xc5, 0x21, 0x04, 0xe6, 0x10, 0x40, 0x00, 0xe6, 0xd4, 0x8a, 0x9b, 0x42, 0x20, 0x9d, 0x00,
  0x02, 0x90, 0x8e, 0x14, 0x87, 0x10, 0x98, 0x43, 0x00, 0x01, 0x98, 0x53, 0x2b, 0x6e, 0x0a, 0x81,
  0x74, 0x02, 0x08, 0x40, 0x3a, 0x52, 0x1c, 0x42, 0x60, 0x0e, 0x01, 0x04, 0x60, 0x4e, 0xad, 0xb8,
  0x29, 0x04, 0xd2, 0x09, 0x20, 0x00, 0xe9, 0x48, 0x71, 0x08, 0x81, 0x39, 0x04, 0x10, 0x80, 0x39,
  0xb5, 0xe2, 0xa6, 0x10, 0x48, 0x27, 0xf0, 0xf9, 0x72, 0xb9, 0xfc, 0x49, 0xf7, 0x1a, 0x70, 0xf8,
  0xe8, 0xfb, 0xd9, 0xc9, 0xff, 0x29, 0xf0, 0x5a, 0xf2, 0x8f, 0x5e, 0xaf, 0xd7, 0x7c, 0xa7, 0x01,
  0x8f, 0xdd, 0xf5, 0x67, 0x02, 0x08, 0x14, 0x8b, 0xa3, 0x10, 0xd8, 0x8d, 0x00, 0x02, 0xb0, 0x5b,
  0x45, 0xc9, 0x07, 0x02, 0x01, 0x02, 0x08, 0x40, 0x00, 0x16, 0x47, 0x21, 0xb0, 0x1b, 0x01, 0x04,
  0x60, 0xb7, 0x8a, 0x92, 0x0f, 0x04, 0x02, 0x04, 0x10, 0x80, 0x00, 0x2c, 0x8e, 0x42, 0x60, 0x37,
  0x02, 0x08, 0xc0, 0x6e, 0x15, 0x25, 0x1f, 0x08, 0x04, 0x08, 0x20, 0x00, 0x01, 0x58, 0x1c, 0x85,
  0xc0, 0x6e, 0x04, 0x10, 0x80, 0xdd, 0x2a, 0x4a, 0x3e, 0x10, 0x08, 0x10, 0x40, 0x00, 0x02, 0xb0,
  0x38, 0x0a, 0x81, 0xdd, 0x08, 0x20, 0x00, 0xbb, 0x55, 0x94, 0x7c, 0x20, 0x10, 0x20, 0x80, 0x00,
  0x04, 0x60, 0x71, 0x14, 0x02, 0xbb, 0x11, 0x58, 0x16, 0x00, 0x5d, 0xcc, 0xd9, 0x01, 0x47, 0x17,
  0x73, 0x76, 0xc4, 0xd7, 0xc5, 0x9c, 0x1d, 0xf1, 0x75, 0x31, 0x67, 0x47, 0x7c, 0x5d, 0x4c, 0xd9,
  0x11, 0x5f, 0x17, 0x73, 0x76, 0xc4, 0xef, 0xce, 0x7f, 0xb5, 0xfe, 0xcb, 0x02, 0xd0, 0x01, 0x9d,
  0x98, 0x10, 0x80, 0x40, 0x0e, 0x01, 0x04, 0x20, 0x87, 0x23, 0x5e, 0x20, 0x30, 0x92, 0xc0, 0xa1,
  0xf5, 0xe0, 0x7e, 0xec, 0x57, 0xbb, 0x62, 0x57, 0x9f, 0x1f, 0xfb, 0xd5, 0xae, 0xd8, 0xd5, 0xe7,
  0xc7, 0x7e, 0xb5, 0x2b, 0x76, 0xf5, 0xf9, 0xb1, 0x4f, 0xed, 0x8a, 0x5d, 0x7d, 0x7e, 0xec, 0x55,
  0x7b, 0x75, 0x57, 0xdd, 0x3d, 0x5d, 0xe4, 0xc7, 0x7e, 0xb5, 0x2b, 0x76, 0xf5, 0x69, 0xbe, 0x76,
  0x5f, 0xb5, 0x2b, 0xf2, 0xd7, 0x7a, 0x5b, 0x7c, 0xb5, 0xa3, 0xf5, 0x3f, 0x24, 0x00, 0xda, 0xe4,
  0xd6, 0xfc, 0x6a, 0xdb, 0x85, 0xce, 0xfe, 0x4f, 0x9b, 0xdc, 0x9a, 0x5f, 0xed, 0xb3, 0x63, 0x9b,
  0x7f, 0x6d, 0x72, 0x6b, 0x7e, 0xb5, 0x2b, 0xe2, 0x6b, 0x91, 0xad, 0xf8, 0x6a, 0x57, 0xc4, 0xd7,
  0x47, 0x6e, 0x8f, 0x5f, 0xed, 0x8a, 0xf8, 0xda, 0xe4, 0xd6, 0xfc, 0x6a, 0x57, 0xc4, 0xd7, 0x7c,
  0x3b, 0xf2, 0xd7, 0x7a, 0xaf, 0xd6, 0x9f, 0x3f, 0x01, 0x2a, 0x5e, 0x0c, 0x31, 0x20, 0xf0, 0x97,
  0x12, 0x40, 0x00, 0xfe, 0xd2, 0xc2, 0x70, 0x2d, 0x08, 0x54, 0x10, 0x58, 0x16, 0x80, 0xea, 0xf1,
  0xdf, 0x43, 0xa9, 0x1e, 0xff, 0x7d, 0xfc, 0xea, 0xf1, 0xdf, 0xc7, 0xd7, 0x71, 0xd0, 0xff, 0x5b,
  0x85, 0xad, 0xe3, 0x70, 0x45, 0x3c, 0x1f, 0xa3, 0x7a, 0xfc, 0xf7, 0xf1, 0xbb, 0xf3, 0x5f, 0xad,
  0xff, 0xb2, 0x00, 0x78, 0x20, 0xd8, 0x10, 0x80, 0xc0, 0x1c, 0x02, 0x08, 0xc0, 0x9c, 0x5a, 0x71,
  0x53, 0x08, 0xa4, 0x13, 0x40, 0x00, 0xd2, 0x91, 0xe2, 0x10, 0x02, 0x73, 0x08, 0x20, 0x00, 0x73,
  0x6a, 0xc5, 0x4d, 0x21, 0x90, 0x4e, 0x00, 0x01, 0x48, 0x47, 0x8a, 0x43, 0x08, 0xcc, 0x21, 0x80,
  0x00, 0xcc, 0xa9, 0x15, 0x37, 0x85, 0x40, 0x3a, 0x01, 0x04, 0x20, 0x1d, 0x29, 0x0e, 0x21, 0x30,
  0x87, 0x00, 0x02, 0x30, 0xa7, 0x56, 0xdc, 0x14, 0x02, 0xe9, 0x04, 0x10, 0x80, 0x74, 0xa4, 0x38,
  0x84, 0xc0, 0x1c, 0x02, 0x08, 0xc0, 0x9c, 0x5a, 0x71, 0x53, 0x08, 0xa4, 0x13, 0x40, 0x00, 0xd2,
  0x91, 0xe2, 0x10, 0x02, 0x73, 0x08, 0x20, 0x00, 0x73, 0x6a, 0xc5, 0x4d, 0x21, 0x90, 0x4e, 0xe0,
  0x4b, 0xf7, 0x7e, 0xf2, 0x47, 0xdf, 0xcf, 0x4e, 0xfe, 0xd7, 0xf4, 0x47, 0x1d, 0x71, 0xf8, 0xe8,
  0xef, 0x9f, 0x09, 0x20, 0xf2, 0x5a, 0x38, 0x0b, 0x81, 0xcd, 0x08, 0x20, 0x00, 0x9b, 0x15, 0x94,
  0x74, 0x20, 0x10, 0x21, 0x80, 0x00, 0x44, 0x68, 0x71, 0x16, 0x02, 0x9b, 0x11, 0x40, 0x00, 0x36,
  0x2b, 0x28, 0xe9, 0x40, 0x20, 0x42, 0x00, 0x01, 0x88, 0xd0, 0xe2, 0x2c, 0x04, 0x36, 0x23, 0x80,
  0x00, 0x6c, 0x56, 0x50, 0xd2, 0x81, 0x40, 0x84, 0x00, 0x02, 0x10, 0xa1, 0xc5, 0x59, 0x08, 0x6c,
  0x46, 0x00, 0x01, 0xd8, 0xac, 0xa0, 0xa4, 0x03, 0x81, 0x08, 0x01, 0x04, 0x20, 0x42, 0x8b, 0xb3,
  0x10, 0xd8, 0x8c, 0x00, 0x02, 0xb0, 0x59, 0x41, 0x49, 0x07, 0x02, 0x11, 0x02, 0x08, 0x40, 0x84,
  0x16, 0x67, 0x21, 0xb0, 0x19, 0x81, 0x65, 0x01, 0xd0, 0xc5, 0x9c, 0x1d, 0x6c, 0x74, 0x31, 0x67,
  0x47, 0x7c, 0x5d, 0xcc, 0xd8, 0x11, 0x5f, 0x17, 0x53, 0x76, 0xc4, 0xd7, 0xc5, 0x9c, 0x1d, 0xf1,
  0xbb, 0xf3, 0xef, 0xae, 0xff, 0xea, 0xfb, 0x5f, 0x16, 0x80, 0x8e, 0xa2, 0x13, 0x13, 0x02, 0x10,
  0xc8, 0x21, 0x80, 0x00, 0xe4, 0x70, 0xc4, 0x0b, 0x04, 0x46, 0x12, 0x38, 0xb4, 0x1e, 0xdc, 0x8f,
  0xfd, 0x6a, 0x57, 0xec, 0xea, 0xf3, 0x63, 0x8f, 0xda, 0x15, 0xbb, 0xfa, 0xfc, 0xd8, 0xa7, 0xf6,
  0xea, 0xae, 0xb6, 0x7b, 0x5e, 0x91, 0x1f, 0x7b, 0xd5, 0xae, 0xd8, 0x55, 0xe7, 0xc7, 0x7e, 0xb5,
  0x2b, 0x76, 0xf5, 0x69, 0xbe, 0xc6, 0x4b, 0xed, 0x8a, 0xfc, 0xb5, 0xde, 0x16, 0x5f, 0xed, 0x8a,
  0xfa, 0xeb, 0x7b, 0xb7, 0xf8, 0x6a, 0x47, 0xdf, 0xff, 0x31, 0x01, 0x78, 0x7b, 0xb3, 0xb8, 0xff,
  0xfb, 0xcf, 0x9a, 0xbf, 0xa2, 0xe9, 0xff, 0x1f, 0xcf, 0xfe, 0xaf, 0x49, 0x5a, 0xf2, 0x6a, 0xeb,
  0xb9, 0xb3, 0x7e, 0x6b, 0x91, 0xad, 0xf8, 0x6a, 0x9f, 0x15, 0x53, 0xfd, 0xea, 0x23, 0xb7, 0xc7,
  0xaf, 0xb6, 0x9e, 0x3b, 0xeb, 0xb7, 0x36, 0xb9, 0x35, 0xbf, 0xda, 0x67, 0xc5, 0x54, 0xbf, 0x9a,
  0x6f, 0x47, 0xfe, 0x5a, 0xef, 0x8e, 0xfa, 0xeb, 0x7b, 0x5f, 0x7d, 0xff, 0xfc, 0x09, 0xa0, 0x2f,
  0x8b, 0xdf, 0x10, 0x78, 0x30, 0x02, 0x08, 0xc0, 0x83, 0x15, 0x9c, 0x74, 0x21, 0xa0, 0x04, 0x96,
  0x05, 0xa0, 0x7a, 0xfc, 0xd7, 0xcb, 0xdb, 0x6f, 0x1d, 0x87, 0xfc, 0xbf, 0x55, 0xd8, 0x3a, 0x0e,
  0x56, 0xc4, 0xf3, 0x31, 0x74, 0x1c, 0xf6, 0xff, 0x56, 0x61, 0x57, 0x8f, 0xff, 0x3e, 0xa7, 0xee,
  0xfc, 0xbb, 0xeb, 0xbf, 0xfa, 0xfe, 0x97, 0x05, 0xc0, 0x17, 0x04, 0x1b, 0x02, 0x10, 0x98, 0x43,
  0x00, 0x01, 0x98, 0x53, 0x2b, 0x6e, 0x0a, 0x81, 0x74, 0x02, 0x08, 0x40, 0x3a, 0x52, 0x1c, 0x42,
  0x60, 0x0e, 0x01, 0x04, 0x60, 0x4e, 0xad, 0xb8, 0x29, 0x04, 0xd2, 0x09, 0x20, 0x00, 0xe9, 0x48,
  0x71, 0x08, 0x81, 0x39, 0x04, 0x10, 0x80, 0x39, 0xb5, 0xe2, 0xa6, 0x10, 0x48, 0x27, 0x80, 0x00,
  0xa4, 0x23, 0xc5, 0x21, 0x04, 0xe6, 0x10, 0x40, 0x00, 0xe6, 0xd4, 0x8a, 0x9b, 0x42, 0x20, 0x9d,
  0x00, 0x02, 0x90, 0x8e, 0x14, 0x87, 0x10, 0x98, 0x43, 0x00, 0x01, 0x98, 0x53, 0x2b, 0x6e, 0x0a,
  0x81, 0x74, 0x02, 0x08, 0x40, 0x3a, 0x52, 0x1c, 0x42, 0x60, 0x0e, 0x01, 0x04, 0x60, 0x4e, 0xad,
  0xb8, 0x29, 0x04, 0xd2, 0x09, 0x7c, 0xbe, 0x5c, 0x2e, 0x7f, 0xd2, 0xbd, 0x06, 0x1c, 0x3e, 0xfa,
  0x7e, 0x76, 0xf2, 0x7f, 0x0a, 0xbc, 0x96, 0xfc, 0xa3, 0xd7, 0xeb, 0x35, 0xdf, 0x69, 0xc0, 0x63,
  0x77, 0xfd, 0x99, 0x00, 0x02, 0xc5, 0xe2, 0x28, 0x04, 0x76, 0x23, 0x80, 0x00, 0xec, 0x56, 0x51,
  0xf2, 0x81, 0x40, 0x80, 0x00, 0x02, 0x10, 0x80, 0xc5, 0x51, 0x08, 0xec, 0x46, 0x00, 0x01, 0xd8,
  0xad, 0xa2, 0xe4, 0x03, 0x81, 0x00, 0x01, 0x04, 0x20, 0x00, 0x8b, 0xa3, 0x10, 0xd8, 0x8d, 0x00,
  0x02, 0xb0, 0x5b, 0x45, 0xc9, 0x07, 0x02, 0x01, 0x02, 0x08, 0x40, 0x00, 0x16, 0x47, 0x21, 0xb0,
  0x1b, 0x01, 0x04, 0x60, 0xb7, 0x8a, 0x92, 0x0f, 0x04, 0x02, 0x04, 0x10, 0x80, 0x00, 0x2c, 0x8e,
  0x42, 0x60, 0x37, 0x02, 0x08, 0xc0, 0x6e, 0x15, 0x25, 0x1f, 0x08, 0x04, 0x08, 0x20, 0x00, 0x01,
  0x58, 0x1c, 0x85, 0xc0, 0x6e, 0x04, 0x96, 0x05, 0x40, 0x17, 0x13, 0x76, 0xc0, 0xd1, 0xc5, 0x8c,
  0x1d, 0xf1, 0x75, 0x31, 0x65, 0x47, 0x7c, 0x5d, 0xcc, 0xd9, 0x11, 0xbf, 0x3b, 0xff, 0xee, 0xfa,
  0x77, 0xbf, 0x7f, 0x5d, 0xcc, 0x7b, 0xa4, 0xfe, 0xcb, 0x02, 0x70, 0x24, 0x28, 0xdf, 0x40, 0x00,
  0x02, 0x7f, 0x07, 0x01, 0x04, 0xe0, 0xef, 0xa8, 0x03, 0xb7, 0x80, 0x40, 0x0b, 0x81, 0x43, 0xeb,
  0xc1, 0xfd, 0xd8, 0xa3, 0xf6, 0xea, 0xae, 0xb2, 0x7b, 0x28, 0xf8, 0xb1, 0x4f, 0xed, 0x8a, 0x5d,
  0x6d, 0x7e, 0xec, 0x55, 0xbb, 0x62, 0x57, 0x9d, 0x1f, 0xfb, 0xd5, 0xae, 0xd8, 0xd5, 0xa7, 0xf9,
  0x5a, 0xbd, 0xd4, 0xae, 0xc8, 0x5f, 0xeb, 0x6d, 0xf1, 0xd5, 0xae, 0xa8, 0xbf, 0xbe, 0x77, 0x8b,
  0xaf, 0x76, 0xc5, 0xfb, 0xf7, 0x63, 0xbf, 0xda, 0xd1, 0x5d, 0x9d, 0x87, 0x04, 0x40, 0x93, 0xb4,
  0xe4, 0xd5, 0x36, 0x20, 0x67, 0xff, 0xa7, 0x45, 0xb6, 0xe2, 0xab, 0x7d, 0x76, 0x6c, 0xf3, 0xaf,
  0x8f, 0xdc, 0x1e, 0xbf, 0xda, 0x15, 0xf1, 0xb5, 0xc9, 0xad, 0xf9, 0xd5, 0xae, 0x88, 0xaf, 0xf9,
  0x76, 0xe4, 0xaf, 0xf5, 0xee, 0xa8, 0xbf, 0xbe, 0xf7, 0x8e, 0xf7, 0xaf, 0x4d, 0x6e, 0xcd, 0xaf,
  0x76, 0xb4, 0xfe, 0xfc, 0x09, 0x10, 0x25, 0xc6, 0x79, 0x08, 0x6c, 0x44, 0x00, 0x01, 0xd8, 0xa8,
  0x98, 0xa4, 0x02, 0x81, 0x28, 0x81, 0x65, 0x01, 0xd0, 0x71, 0x28, 0x1a, 0x3c, 0xe3, 0xbc, 0x8e,
  0x83, 0x19, 0xfe, 0xa2, 0x3e, 0x74, 0x1c, 0x8e, 0x7e, 0x9b, 0x71, 0xbe, 0x7a, 0xfc, 0xf7, 0x77,
  0xee, 0xce, 0xbf, 0xbb, 0xfe, 0xdd, 0xef, 0x7f, 0x65, 0xfc, 0xb7, 0x5a, 0x2e, 0x0b, 0x80, 0x7f,
  0x10, 0xd8, 0x10, 0x80, 0xc0, 0x1c, 0x02, 0x08, 0xc0, 0x9c, 0x5a, 0x71, 0x53, 0x08, 0xa4, 0x13,
  0x40, 0x00, 0xd2, 0x91, 0xe2, 0x10, 0x02, 0x73, 0x08, 0x20, 0x00, 0x73, 0x6a, 0xc5, 0x4d, 0x21,
  0x90, 0x4e, 0x00, 0x01, 0x48, 0x47, 0x8a, 0x43, 0x08, 0xcc, 0x21, 0x80, 0x00, 0xcc, 0xa9, 0x15,
  0x37, 0x85, 0x40, 0x3a, 0x01, 0x04, 0x20, 0x1d, 0x29, 0x0e, 0x21, 0x30, 0x87, 0x00, 0x02, 0x30,
  0xa7, 0x56, 0xdc, 0x14, 0x02, 0xe9, 0x04, 0x10, 0x80, 0x74, 0xa4, 0x38, 0x84, 0xc0, 0x1c, 0x02,
  0x08, 0xc0, 0x9c, 0x5a, 0x71, 0x53, 0x08, 0xa4, 0x13, 0x40, 0x00, 0xd2, 0x91, 0xe2, 0x10, 0x02,
  0x73, 0x08, 0x20, 0x00, 0x73, 0x6a, 0xc5, 0x4d, 0x21, 0x90, 0x4e, 0xe0, 0x4b, 0xf7, 0x7e, 0xf2,
  0x47, 0xdf, 0xcf, 0x4e, 0xfe, 0xd7, 0xf4, 0x47, 0x1d, 0x71, 0xf8, 0xe8, 0xef, 0x9f, 0x09, 0x20,
  0xf2, 0x5a, 0x38, 0x0b, 0x81, 0xcd, 0x08, 0x20, 0x00, 0x9b, 0x15, 0x94, 0x74, 0x20, 0x10, 0x21,
  0x80, 0x00, 0x44, 0x68, 0x71, 0x16, 0x02, 0x9b, 0x11, 0x40, 0x00, 0x36, 0x2b, 0x28, 0xe9, 0x40,
  0x20, 0x42, 0x00, 0x01, 0x88, 0xd0, 0xe2, 0x2c, 0x04, 0x36, 0x23, 0x80, 0x00, 0x6c, 0x56, 0x50,
  0xd2, 0x81, 0x40, 0x84, 0x00, 0x02, 0x10, 0xa1, 0xc5, 0x59, 0x08, 0x6c, 0x46, 0x00, 0x01, 0xd8,
  0xac, 0xa0, 0xa4, 0x03, 0x81, 0x08, 0x01, 0x04, 0x20, 0x42, 0x8b, 0xb3, 0x10, 0xd8, 0x8c, 0x00,
  0x02, 0xb0, 0x59, 0x41, 0x49, 0x07, 0x02, 0x11, 0x02, 0x08, 0x40, 0x84, 0x16, 0x67, 0x21, 0xb0,
  0x19, 0x81, 0x65, 0x01, 0xd0, 0xc5, 0x8c, 0x1d, 0x6c, 0x74, 0x31, 0x65, 0x47, 0x7c, 0x5d, 0xcc,
  0xd9, 0x11, 0xbf, 0x3b, 0xff, 0xee, 0xfa, 0xeb, 0x62, 0xce, 0x0e, 0xfe, 0xba, 0x98, 0xb3, 0x23,
  0xfe, 0xfb, 0xd7, 0xd7, 0xa5, 0xb0, 0xcb, 0x02, 0xb0, 0x14, 0x9d, 0x8f, 0x21, 0x00, 0x81, 0x56,
  0x02, 0x08, 0x40, 0x2b, 0x7e, 0x82, 0x43, 0xa0, 0x97, 0xc0, 0xa1, 0xf5, 0xe0, 0x7e, 0xec, 0x53,
  0xbb, 0x62, 0x57, 0x9b, 0x1f, 0x7b, 0xd5, 0xae, 0xd8, 0x55, 0xe7, 0xc7, 0x7e, 0xb5, 0x2b, 0x76,
  0xf5, 0x69, 0xbe, 0xf6, 0x7c, 0xd4, 0xae, 0xc8, 0x5f, 0xeb, 0x6d, 0xf1, 0xd5, 0xae, 0xa8, 0xbf,
  0x1f, 0xfb, 0xd5, 0xae, 0xd8, 0xd5, 0xe7, 0xc7, 0x7e, 0xb5, 0x57, 0x77, 0xf5, 0x19, 0xcf, 0x7f,
  0xfb, 0xcf, 0x8f, 0xfd, 0x6a, 0x7f, 0xff, 0xfd, 0xfc, 0x6f, 0x9f, 0x7f, 0xf8, 0xf7, 0x43, 0x02,
  0xa0, 0x45, 0xb6, 0xe2, 0xab, 0xfd, 0xc1, 0xfb, 0x49, 0x86, 0x3e, 0x72, 0x7b, 0xfc, 0x6a, 0x9f,
  0x14, 0xf2, 0x83, 0x5b, 0x6d, 0x72, 0x6b, 0x7e, 0xb5, 0x3f, 0x1c, 0x3c, 0xc9, 0xd0, 0x7c, 0x3b,
  0xf2, 0xd7, 0x7a, 0x77, 0xd4, 0x5f, 0x9b, 0xdc, 0x9a, 0x5f, 0xed, 0x93, 0x90, 0x7f, 0x70, 0xab,
  0x4d, 0x6e, 0xcd, 0xaf, 0xf6, 0x87, 0x83, 0x27, 0x19, 0xda, 0xe4, 0xd6, 0xfc, 0x6a, 0x47, 0x43,
  0xf2, 0x27, 0x40, 0x94, 0x18, 0xe7, 0x21, 0xb0, 0x11, 0x01, 0x04, 0x60, 0xa3, 0x62, 0x92, 0x0a,
  0x04, 0xa2, 0x04, 0x96, 0x05, 0x40, 0xc7, 0xc1, 0x68, 0xf0, 0x8c, 0xf3, 0x3a, 0x0e, 0x67, 0xf8,
  0x8b, 0xfa, 0xa8, 0x1e, 0xff, 0xfd, 0xfd, 0xba, 0xf3, 0xef, 0xae, 0x7f, 0xf5, 0xf8, 0xef, 0xf9,
  0x57, 0x8f, 0xff, 0x3e, 0xfe, 0xca, 0xf8, 0x6f, 0xbe, 0x96, 0x05, 0xc0, 0x5f, 0x08, 0x1b, 0x02,
  0x10, 0x98, 0x43, 0x00, 0x01, 0x98, 0x53, 0x2b, 0x6e, 0x0a, 0x81, 0x74, 0x02, 0x08, 0x40, 0x3a,
  0x52, 0x1c, 0x42, 0x60, 0x0e, 0x01, 0x04, 0x60, 0x4e, 0xad, 0xb8, 0x29, 0x04, 0xd2, 0x09, 0x20,
  0x00, 0xe9, 0x48, 0x71, 0x08, 0x81, 0x39, 0x04, 0x10, 0x80, 0x39, 0xb5, 0xe2, 0xa6, 0x10, 0x48,
  0x27, 0x80, 0x00, 0xa4, 0x23, 0xc5, 0x21, 0x04, 0xe6, 0x10, 0x40, 0x00, 0xe6, 0xd4, 0x8a, 0x9b,
  0x42, 0x20, 0x9d, 0x00, 0x02, 0x90, 0x8e, 0x14, 0x87, 0x10, 0x98, 0x43, 0x00, 0x01, 0x98, 0x53,
  0x2b, 0x6e, 0x0a, 0x81, 0x74, 0x02, 0x08, 0x40, 0x3a, 0x52, 0x1c, 0x42, 0x60, 0x0e, 0x01, 0x04,
  0x60, 0x4e, 0xad, 0xb8, 0x29, 0x04, 0xd2, 0x09, 0x7c, 0xbe, 0x5c, 0x2e, 0x7f, 0xd2, 0xbd, 0x06,
  0x1c, 0x3e, 0xfa, 0x7e, 0x76, 0xf2, 0x7f, 0x0a, 0xbc, 0x96, 0xfc, 0xa3, 0xd7, 0xeb, 0x35, 0xdf,
  0x69, 0xc0, 0x63, 0x77, 0xfd, 0x99, 0x00, 0x02, 0xc5, 0xe2, 0x28, 0x04, 0x76, 0x23, 0x80, 0x00,
  0xec, 0x56, 0x51, 0xf2, 0x81, 0x40, 0x80, 0x00, 0x02, 0x10, 0x80, 0xc5, 0x51, 0x08, 0xec, 0x46,
  0x00, 0x01, 0xd8, 0xad, 0xa2, 0xe4, 0x03, 0x81, 0x00, 0x01, 0x04, 0x20, 0x00, 0x8b, 0xa3, 0x10,
  0xd8, 0x8d, 0x00, 0x02, 0xb0, 0x5b, 0x45, 0xc9, 0x07, 0x02, 0x01, 0x02, 0x08, 0x40, 0x00, 0x16,
  0x47, 0x21, 0xb0, 0x1b, 0x01, 0x04, 0x60, 0xb7, 0x8a, 0x92, 0x0f, 0x04, 0x02, 0x04, 0x10, 0x80,
  0x00, 0x2c, 0x8e, 0x42, 0x60, 0x37, 0x02, 0x08, 0xc0, 0x6e, 0x15, 0x25, 0x1f, 0x08, 0x04, 0x08,
  0x20, 0x00, 0x01, 0x58, 0x1c, 0x85, 0xc0, 0x6e, 0x04, 0x96, 0x05, 0x40, 0x17, 0x53, 0x76, 0xc0,
  0xd1, 0xc5, 0x9c, 0x1d, 0xf1, 0xbb, 0xf3, 0xd7, 0xc5, 0x9c, 0x1d, 0xf9, 0xeb, 0x62, 0xce, 0x8e,
  0xf8, 0xba, 0x98, 0xb3, 0x23, 0xbe, 0x2e, 0xe6, 0xec, 0x88, 0xff, 0xeb, 0xe5, 0xc7, 0x52, 0xd8,
  0x65, 0x01, 0x58, 0x8a, 0xce, 0xc7, 0x10, 0x80, 0x40, 0x2b, 0x01, 0x04, 0xa0, 0x15, 0x3f, 0xc1,
  0x21, 0xd0, 0x4b, 0xe0, 0xd0, 0x7a, 0x70, 0x3f, 0xf6, 0xaa, 0x5d, 0xb1, 0xab, 0xce, 0x8f, 0xfd,
  0x6a, 0x57, 0xec, 0xea, 0xd3, 0x7c, 0xad, 0x7c, 0x6a, 0x57, 0xe4, 0xef, 0xc7, 0x7e, 0xb5, 0x2b,
  0x76, 0xf5, 0xf9, 0xb1, 0x5f, 0xed, 0x8a, 0x5d, 0x7d, 0x7e, 0xec, 0x57, 0xbb, 0x62, 0x57, 0x9f,
  0x1f, 0xfb, 0xd5, 0x5e, 0xdd, 0xd5, 0x77, 0x8f, 0x1c, 0xf8, 0xb1, 0x5f, 0xed, 0x6f, 0x2f, 0x6f,
  0xf7, 0xb8, 0xb8, 0x9d, 0x39, 0x24, 0x00, 0xfa, 0xc8, 0xed, 0xf1, 0xab, 0x7d, 0xf3, 0x7c, 0xe2,
  0x0f, 0x6d, 0x72, 0x6b, 0x7e, 0xb5, 0x4f, 0x0c, 0x7b, 0x73, 0xad, 0xf9, 0x76, 0xe4, 0xaf, 0x4d,
  0x6e, 0xcd, 0xaf, 0xf6, 0xed, 0x92, 0x27, 0xfe, 0xd0, 0x26, 0xb7, 0xe6, 0x57, 0xfb, 0xc4, 0xb0,
  0x37, 0xd7, 0xda, 0xe4, 0xd6, 0xfc, 0x6a, 0xdf, 0x0e, 0x9d, 0xf8, 0x43, 0x9b, 0xdc, 0x9a, 0x5f,
  0xed, 0x13, 0xc3, 0xde, 0x5c, 0x6b, 0x93, 0x5b, 0xf3, 0xab, 0x7d, 0x3b, 0x74, 0xe7, 0x0f, 0xfe,
  0x04, 0xb8, 0x13, 0x14, 0xc7, 0x20, 0xb0, 0x23, 0x01, 0x04, 0x60, 0xc7, 0xaa, 0x92, 0x13, 0x04,
  0xee, 0x24, 0xb0, 0x2c, 0x00, 0x3a, 0x0e, 0xdf, 0x19, 0x33, 0xf5, 0x58, 0xf5, 0xf8, 0xef, 0x2f,
  0xdf, 0x9d, 0x7f, 0xf5, 0xf8, 0xef, 0xf3, 0xaf, 0x1e, 0xff, 0x7d, 0xfc, 0xea, 0xf1, 0xdf, 0xc7,
  0xaf, 0x1e, 0xff, 0x7d, 0xfc, 0x95, 0xf1, 0xdf, 0x7c, 0x2d, 0x0b, 0x80, 0xbf, 0x10, 0x36, 0x04,
  0x20, 0x30, 0x87, 0x00, 0x02, 0x30, 0xa7, 0x56, 0xdc, 0x14, 0x02, 0xe9, 0x04, 0x10, 0x80, 0x74,
  0xa4, 0x38, 0x84, 0xc0, 0x1c, 0x02, 0x08, 0xc0, 0x9c, 0x5a, 0x71, 0x53, 0x08, 0xa4, 0x13, 0x40,
  0x00, 0xd2, 0x91, 0xe2, 0x10, 0x02, 0x73, 0x08, 0x20, 0x00, 0x73, 0x6a, 0xc5, 0x4d, 0x21, 0x90,
  0x4e, 0x00, 0x01, 0x48, 0x47, 0x8a, 0x43, 0x08, 0xcc, 0x21, 0x80, 0x00, 0xcc, 0xa9, 0x15, 0x37,
  0x85, 0x40, 0x3a, 0x01, 0x04, 0x20, 0x1d, 0x29, 0x0e, 0x21, 0x30, 0x87, 0x00, 0x02, 0x30, 0xa7,
  0x56, 0xdc, 0x14, 0x02, 0xe9, 0x04, 0x10, 0x80, 0x74, 0xa4, 0x38, 0x84, 0xc0, 0x1c, 0x02, 0x08,
  0xc0, 0x9c, 0x5a, 0x71, 0x53, 0x08, 0xa4, 0x13, 0xf8, 0xd2, 0xbd, 0x9f, 0xfc, 0xd1, 0xf7, 0xb3,
  0x93, 0xff, 0x35, 0xfd, 0x51, 0x47, 0x1c, 0x3e, 0xfa, 0xfb, 0x67, 0x02, 0x88, 0xbc, 0x16, 0xce,
  0x42, 0x60, 0x33, 0x02, 0x08, 0xc0, 0x66, 0x05, 0x25, 0x1d, 0x08, 0x44, 0x08, 0x20, 0x00, 0x11,
  0x5a, 0x9c, 0x85, 0xc0, 0x66, 0x04, 0x10, 0x80, 0xcd, 0x0a, 0x4a, 0x3a, 0x10, 0x88, 0x10, 0x40,
  0x00, 0x22, 0xb4, 0x38, 0x0b, 0x81, 0xcd, 0x08, 0x20, 0x00, 0x9b, 0x15, 0x94, 0x74, 0x20, 0x10,
  0x21, 0x80, 0x00, 0x44, 0x68, 0x71, 0x16, 0x02, 0x9b, 0x11, 0x40, 0x00, 0x36, 0x2b, 0x28, 0xe9,
  0x40, 0x20, 0x42, 0x00, 0x01, 0x88, 0xd0, 0xe2, 0x2c, 0x04, 0x36, 0x23, 0x80, 0x00, 0x6c, 0x56,
  0x50, 0xd2, 0x81, 0x40, 0x84, 0x00, 0x02, 0x10, 0xa1, 0xc5, 0x59, 0x08, 0x6c, 0x46, 0x60, 0x59,
  0x00, 0x74, 0x31, 0x67, 0x07, 0x1b, 0x5d, 0xcc, 0xd9, 0x11, 0x5f, 0x17, 0x73, 0x76, 0xc4, 0xd7,
  0xc5, 0x9c, 0x1d, 0xf1, 0x75, 0x31, 0x67, 0x47, 0x7c, 0x5d, 0xcc, 0xd9, 0x11, 0x5f, 0x17, 0x73,
  0x76, 0xc4, 0x7f, 0x7d, 0xff, 0xb9, 0x14, 0x76, 0x59, 0x00, 0x96, 0xa2, 0xf3, 0x31, 0x04, 0x20,
  0xd0, 0x4a, 0x00, 0x01, 0x68, 0xc5, 0x4f, 0x70, 0x08, 0xf4, 0x12, 0x38, 0xb4, 0x1e, 0xdc, 0x8f,
  0xfd, 0x6a, 0x57, 0xec, 0xea, 0xf3, 0x63, 0xbf, 0xda, 0x15, 0xbb, 0xfa, 0xfc, 0xd8, 0xaf, 0x76,
  0xc5, 0xae, 0x3e, 0x3f, 0xf6, 0xab, 0x5d, 0xb1, 0xab, 0xcf, 0x8f, 0xfd, 0x6a, 0x57, 0xec, 0xea,
  0xf3, 0x63, 0xbf, 0xda, 0x15, 0xbb, 0xfa, 0xfc, 0xd8, 0xaf, 0xf6, 0xea, 0xae, 0xbe, 0x7b, 0xe4,
  0xc0, 0x8f, 0xfd, 0x6a, 0x3f, 0x7f, 0xff, 0xe7, 0x1e, 0x17, 0xb7, 0x33, 0x87, 0x04, 0x40, 0x9b,
  0xdc, 0x9a, 0x5f, 0xed, 0x9b, 0xe7, 0x13, 0x7f, 0x68, 0x93, 0x5b, 0xf3, 0xab, 0x7d, 0x62, 0xd8,
  0x9b, 0x6b, 0x6d, 0x72, 0x6b, 0x7e, 0xb5, 0x6f, 0x87, 0x4e, 0xfc, 0xa1, 0x4d, 0x6e, 0xcd, 0xaf,
  0xf6, 0x89, 0x61, 0x6f, 0xae, 0xb5, 0xc9, 0xad, 0xf9, 0xd5, 0xbe, 0x1d, 0x3a, 0xf1, 0x87, 0x36,
  0xb9, 0x35, 0xbf, 0xda, 0x27, 0x86, 0xbd, 0xb9, 0xd6, 0x26, 0xb7, 0xe6, 0x57, 0xfb, 0x76, 0xe8,
  0xc4, 0x1f, 0xda, 0xe4, 0xd6, 0xfc, 0x6a, 0x47, 0xc3, 0xf2, 0x27, 0x40, 0x94, 0x18, 0xe7, 0x21,
  0xb0, 0x11, 0x01, 0x04, 0x60, 0xa3, 0x62, 0x92, 0x0a, 0x04, 0xa2, 0x04, 0x96, 0x05, 0xa0, 0x7a,
  0xfc, 0xf7, 0x09, 0x56, 0x8f, 0xff, 0x3e, 0x7e, 0xf5, 0xf8, 0xef, 0xe3, 0x57, 0x8f, 0xff, 0x3e,
  0x7e, 0xf5, 0xf8, 0xef, 0xe3, 0x57, 0x8f, 0xff, 0x3e, 0x7e, 0xf5, 0xf8, 0xef, 0xe3, 0xaf, 0x8c,
  0xff, 0xe6, 0x6b, 0x59, 0x00, 0xfc, 0x85, 0xb0, 0x21, 0x00, 0x81, 0x39, 0x04, 0x10, 0x80, 0x39,
  0xb5, 0xe2, 0xa6, 0x10, 0x48, 0x27, 0x80, 0x00, 0xa4, 0x23, 0xc5, 0x21, 0x04, 0xe6, 0x10, 0x40,
  0x00, 0xe6, 0xd4, 0x8a, 0x9b, 0x42, 0x20, 0x9d, 0x00, 0x02, 0x90, 0x8e, 0x14, 0x87, 0x10, 0x98,
  0x43, 0x00, 0x01, 0x98, 0x53, 0x2b, 0x6e, 0x0a, 0x81, 0x74, 0x02, 0x08, 0x40, 0x3a, 0x52, 0x1c,
  0x42, 0x60, 0x0e, 0x01, 0x04, 0x60, 0x4e, 0xad, 0xb8, 0x29, 0x04, 0xd2, 0x09, 0x20, 0x00, 0xe9,
  0x48, 0x71, 0x08, 0x81, 0x39, 0x04, 0x10, 0x80, 0x39, 0xb5, 0xe2, 0xa6, 0x10, 0x48, 0x27, 0x80,
  0x00, 0xa4, 0x23, 0xc5, 0x21, 0x04, 0xe6, 0x10, 0x40, 0x00, 0xe6, 0xd4, 0x8a, 0x9b, 0x42, 0x20,
  0x9d, 0xc0, 0x7f, 0x01, 0xe2, 0x1b, 0x61, 0x56, 0x00, 0xc6, 0x6d, 0x3a, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

void lvk::Texture::InitDefaultTexture(lvk::VkState & vk)
{
	g_DefaultTexture = new Texture(Texture::CreateTextureFromMemory(vk, &p_DefaultTextureBytesPNG[0], p_DefaultTextureBytesPNG_Length, VK_FORMAT_R8G8B8A8_UNORM));
}

void lvk::Texture::FreeDefaultTexture(lvk::VkState & vk)
{
	g_DefaultTexture->Free(vk);
	delete g_DefaultTexture;
}

void lvk::Texture::Free(lvk::VkState & vk)
{
    vkDestroySampler(vk.m_LogicalDevice, m_Sampler, nullptr);
    vkDestroyImageView(vk.m_LogicalDevice, m_ImageView, nullptr);
    vkDestroyImage(vk.m_LogicalDevice, m_Image, nullptr);
    vkFreeMemory(vk.m_LogicalDevice, m_Memory, nullptr);
    // TODO: Better solution for descriptor sets in ImGui, this currently leaks
    if (vk.m_UseImGui && false)
    {
        ImGui_ImplVulkan_RemoveTexture(m_ImGuiHandle);
    }
}



void lvk::textures::CreateImage(VkState& vk, uint32_t width, uint32_t height, uint32_t numMips, VkSampleCountFlagBits sampleCount, VkFormat format, VkImageTiling tiling, VkImageUsageFlags usage, VkMemoryPropertyFlags properties, VkImage& image, VkDeviceMemory& imageMemory, uint32_t depth)
{
    VkImageCreateInfo imageInfo{};
    imageInfo.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
    imageInfo.imageType = VK_IMAGE_TYPE_2D;
    imageInfo.extent.width = width;
    imageInfo.extent.height = height;
    imageInfo.extent.depth = depth;
    imageInfo.mipLevels = numMips;
    imageInfo.arrayLayers = 1;
    imageInfo.format = format;
    imageInfo.tiling = tiling;
    imageInfo.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;
    imageInfo.usage = usage;
    imageInfo.samples = sampleCount;
    imageInfo.sharingMode = VK_SHARING_MODE_EXCLUSIVE;

    if (vkCreateImage(vk.m_LogicalDevice, &imageInfo, nullptr, &image) != VK_SUCCESS) {
        throw std::runtime_error("failed to create image!");
    }

    VkMemoryRequirements memRequirements;
    vkGetImageMemoryRequirements(vk.m_LogicalDevice, image, &memRequirements);

    VkMemoryAllocateInfo allocInfo{};
    allocInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
    allocInfo.allocationSize = memRequirements.size;
    allocInfo.memoryTypeIndex = utils::FindMemoryType(vk,memRequirements.memoryTypeBits, properties);

    VK_CHECK(vkAllocateMemory(vk.m_LogicalDevice, &allocInfo, nullptr, &imageMemory))

    vkBindImageMemory(vk.m_LogicalDevice, image, imageMemory, 0);
}

void lvk::textures::CreateImageView(VkState& vk, VkImage& image, VkFormat format, uint32_t numMips, VkImageAspectFlags aspectFlags, VkImageView& imageView, VkImageViewType imageViewType)
{
    VkImageViewCreateInfo viewInfo{};
    viewInfo.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
    viewInfo.image = image;
    viewInfo.viewType = imageViewType;
    viewInfo.format = format;
    viewInfo.subresourceRange.aspectMask = aspectFlags;
    viewInfo.subresourceRange.baseMipLevel = 0;
    viewInfo.subresourceRange.levelCount = numMips;
    viewInfo.subresourceRange.baseArrayLayer = 0;
    viewInfo.subresourceRange.layerCount = 1;

    VK_CHECK(vkCreateImageView(vk.m_LogicalDevice, &viewInfo, nullptr, &imageView))
}

void lvk::textures::CreateImageSampler(VkState& vk, VkImageView& imageView, uint32_t numMips, VkFilter filterMode, VkSamplerAddressMode addressMode, VkSampler& sampler)
{
    VkSamplerCreateInfo samplerInfo{};
    samplerInfo.sType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
    samplerInfo.magFilter = filterMode;
    samplerInfo.minFilter = filterMode;

    samplerInfo.addressModeU = addressMode;
    samplerInfo.addressModeV = addressMode;
    samplerInfo.addressModeW = addressMode;

    VkPhysicalDeviceProperties properties{};
    vkGetPhysicalDeviceProperties(vk.m_PhysicalDevice, &properties);

    samplerInfo.anisotropyEnable = VK_TRUE;
    samplerInfo.maxAnisotropy = properties.limits.maxSamplerAnisotropy;
    samplerInfo.borderColor = VK_BORDER_COLOR_INT_OPAQUE_BLACK;
    samplerInfo.unnormalizedCoordinates = VK_FALSE;
    samplerInfo.compareEnable = VK_FALSE;
    samplerInfo.compareOp = VK_COMPARE_OP_ALWAYS;

    samplerInfo.mipmapMode = VK_SAMPLER_MIPMAP_MODE_LINEAR;
    samplerInfo.mipLodBias = 0.0f;
    samplerInfo.minLod = 0.0f; // static_cast<float>(numMips / 2); to test mips are working
    samplerInfo.maxLod = static_cast<float>(numMips);

    VK_CHECK(vkCreateSampler(vk.m_LogicalDevice, &samplerInfo, nullptr, &sampler))
}

void lvk::textures::CreateTexture(VkState& vk, const String& path, VkFormat format, VkImage& image, VkImageView& imageView, VkDeviceMemory& imageMemory, uint32_t* numMips)
{
    bool generateMips = numMips != nullptr;

    int texWidth, texHeight, texChannels;
    stbi_uc* pixels = stbi_load(path.c_str(), &texWidth, &texHeight, &texChannels, STBI_rgb_alpha);
    VkDeviceSize imageSize = texWidth * texHeight * 4;

    if (!pixels)
    {
        spdlog::error("Failed to load texture image at path {}", path);
        return;
    }

    uint32_t mips = 1;
    if (generateMips)
    {
        mips = static_cast<uint32_t>(std::floor(std::log2(std::max(texWidth, texHeight)))) + 1;
        *numMips = mips;
    }
    
    // create staging buffer to copy texture to gpu
    VkBuffer stagingBuffer;
    VmaAllocation stagingBufferMemory;
    constexpr VkBufferUsageFlags bufferUsageFlags = VK_BUFFER_USAGE_TRANSFER_SRC_BIT;
    constexpr VkMemoryPropertyFlags memoryPropertiesFlags = VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT;
    buffers::CreateBufferVMA(vk,imageSize, bufferUsageFlags, memoryPropertiesFlags, stagingBuffer, stagingBufferMemory);

    void* data;
    vmaMapMemory(vk.m_Allocator, stagingBufferMemory, &data);
    memcpy(data, pixels, static_cast<size_t>(imageSize));
    vmaUnmapMemory(vk.m_Allocator, stagingBufferMemory);
    stbi_image_free(pixels);

    CreateImage(vk, texWidth, texHeight, mips, VK_SAMPLE_COUNT_1_BIT,
                format, VK_IMAGE_TILING_OPTIMAL,
                VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT, VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
                image, imageMemory);
    CreateImageView(vk, image, format, mips, VK_IMAGE_ASPECT_COLOR_BIT, imageView);

    TransitionImageLayout(vk, image, format, mips, VK_IMAGE_LAYOUT_UNDEFINED, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL);
    CopyBufferToImage(vk, stagingBuffer, image, texWidth, texHeight);
    
    GenerateMips(vk, image, format, static_cast<uint32_t>(texWidth), static_cast<uint32_t>(texWidth), mips, VK_FILTER_LINEAR);
    
    TransitionImageLayout(vk, image, format, mips, VK_IMAGE_LAYOUT_UNDEFINED, VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);

    vkDestroyBuffer(vk.m_LogicalDevice, stagingBuffer, nullptr);
    vmaFreeMemory(vk.m_Allocator, stagingBufferMemory);
}

void lvk::textures::CreateTextureFromMemory(VkState& vk, unsigned char* tex_data, uint32_t dataSize, VkFormat format, VkImage& image, VkImageView& imageView, VkDeviceMemory& imageMemory, uint32_t* numMips)
{
    bool generateMips = numMips != nullptr;

    int texWidth, texHeight, texChannels;
    stbi_uc* pixels = stbi_load_from_memory(tex_data, dataSize, &texWidth, &texHeight, &texChannels, STBI_rgb_alpha);
    VkDeviceSize imageSize = texWidth * texHeight * 4;

    if (!pixels)
    {
        spdlog::error("Failed to load texture image from memory");
        return;
    }

    uint32_t mips = 1;
    if (generateMips)
    {
        mips = static_cast<uint32_t>(std::floor(std::log2(std::max(texWidth, texHeight)))) + 1;
        *numMips = mips;
    }

    // create staging buffer to copy texture to gpu
    VkBuffer stagingBuffer;
    VmaAllocation stagingBufferMemory;
    constexpr VkBufferUsageFlags bufferUsageFlags = VK_BUFFER_USAGE_TRANSFER_SRC_BIT;
    constexpr VkMemoryPropertyFlags memoryPropertiesFlags = VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT;
    buffers::CreateBufferVMA(vk,imageSize, bufferUsageFlags, memoryPropertiesFlags, stagingBuffer, stagingBufferMemory);

    void* data;
    vmaMapMemory(vk.m_Allocator, stagingBufferMemory, &data);
    memcpy(data, pixels, static_cast<size_t>(imageSize));
    vmaUnmapMemory(vk.m_Allocator, stagingBufferMemory);
    stbi_image_free(pixels);

    CreateImage(vk, texWidth, texHeight, mips, VK_SAMPLE_COUNT_1_BIT,
                format, VK_IMAGE_TILING_OPTIMAL,
                VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT, VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
                image, imageMemory);
    CreateImageView(vk, image, format, mips, VK_IMAGE_ASPECT_COLOR_BIT, imageView);

    TransitionImageLayout(vk, image, format, mips, VK_IMAGE_LAYOUT_UNDEFINED, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL);
    CopyBufferToImage(vk, stagingBuffer, image, texWidth, texHeight);

    GenerateMips(vk, image, format, static_cast<uint32_t>(texWidth), static_cast<uint32_t>(texWidth), mips, VK_FILTER_LINEAR);

    TransitionImageLayout(vk, image, format, mips, VK_IMAGE_LAYOUT_UNDEFINED, VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);

    vkDestroyBuffer(vk.m_LogicalDevice, stagingBuffer, nullptr);
    vmaFreeMemory(vk.m_Allocator, stagingBufferMemory);
}

void lvk::textures::CreateTexture3DFromMemory(VkState& vk, unsigned char* tex_data, VkExtent3D extent, uint32_t dataSize, VkFormat format, VkImage& image, VkImageView& imageView, VkDeviceMemory& imageMemory, uint32_t* numMips)
{
    bool generateMips = numMips != nullptr;

    int texWidth, texHeight, texChannels;
    stbi_uc* pixels = stbi_load_from_memory(tex_data, dataSize, &texWidth, &texHeight, &texChannels, STBI_rgb_alpha);
    VkDeviceSize imageSize = texWidth * texHeight * 4;

    if (!pixels)
    {
        spdlog::error("Failed to load texture image from memory");
        return;
    }

    uint32_t mips = 1;
    if (generateMips)
    {
        mips = static_cast<uint32_t>(std::floor(std::log2(std::max(texWidth, texHeight)))) + 1;
        *numMips = mips;
    }

    // create staging buffer to copy texture to gpu
    VkBuffer stagingBuffer;
    VmaAllocation stagingBufferMemory;
    constexpr VkBufferUsageFlags bufferUsageFlags = VK_BUFFER_USAGE_TRANSFER_SRC_BIT;
    constexpr VkMemoryPropertyFlags memoryPropertiesFlags = VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT;
    buffers::CreateBufferVMA(vk,imageSize, bufferUsageFlags, memoryPropertiesFlags, stagingBuffer, stagingBufferMemory);

    void* data;
    vmaMapMemory(vk.m_Allocator, stagingBufferMemory, &data);
    memcpy(data, pixels, static_cast<size_t>(imageSize));
    vmaUnmapMemory(vk.m_Allocator, stagingBufferMemory);
    stbi_image_free(pixels);

    CreateImage(vk, texWidth, texHeight, mips, VK_SAMPLE_COUNT_1_BIT,
                format, VK_IMAGE_TILING_OPTIMAL,
                VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT, VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
                image, imageMemory);
    CreateImageView(vk, image, format, mips, VK_IMAGE_ASPECT_COLOR_BIT, imageView);

    TransitionImageLayout(vk, image, format, mips, VK_IMAGE_LAYOUT_UNDEFINED, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL);
    CopyBufferToImage(vk, stagingBuffer, image, texWidth, texHeight);

    GenerateMips(vk, image, format, static_cast<uint32_t>(texWidth), static_cast<uint32_t>(texWidth), mips, VK_FILTER_LINEAR);

    TransitionImageLayout(vk, image, format, mips, VK_IMAGE_LAYOUT_UNDEFINED, VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);

    vkDestroyBuffer(vk.m_LogicalDevice, stagingBuffer, nullptr);
    vmaFreeMemory(vk.m_Allocator, stagingBufferMemory);
}


void lvk::textures::GenerateMips(VkState& vk, VkImage image, VkFormat format, uint32_t imageWidth, uint32_t imageHeight, uint32_t numMips, VkFilter filterMethod)
{
    VkFormatProperties formatProperties;
    vkGetPhysicalDeviceFormatProperties(vk.m_PhysicalDevice, format, &formatProperties);

    auto supportsLinearSampling = formatProperties.optimalTilingFeatures & VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT;

    if (supportsLinearSampling <= 0)
    {
        spdlog::error("GenerateMips : No support for linear blitting!");
        return;
    }

    VkCommandBuffer cmd = commands::BeginSingleTimeCommands(vk);

    VkImageMemoryBarrier barrier{ };
    barrier.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
    barrier.image = image;
    barrier.srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
    barrier.dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
    barrier.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
    barrier.subresourceRange.baseArrayLayer = 0;
    barrier.subresourceRange.layerCount = 1;
    barrier.subresourceRange.levelCount = 1;

    int32_t mipWidth = imageWidth;
    int32_t mipHeight = imageHeight;

    for (uint32_t i = 1; i < numMips; i++) {
        barrier.subresourceRange.baseMipLevel = i - 1;
        barrier.oldLayout = VK_IMAGE_LAYOUT_UNDEFINED;
        barrier.newLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;
        barrier.srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
        barrier.dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
        barrier.srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;
        barrier.dstAccessMask = VK_ACCESS_TRANSFER_READ_BIT;

        vkCmdPipelineBarrier(cmd, VK_PIPELINE_STAGE_TRANSFER_BIT, VK_PIPELINE_STAGE_TRANSFER_BIT, 0,
                             0, nullptr,
                             0, nullptr,
                             1, &barrier);

        VkImageBlit imageBlit{};
        imageBlit.srcOffsets[0] = { 0, 0, 0 };
        imageBlit.srcOffsets[1] = { mipWidth, mipHeight, 1 };
        imageBlit.srcSubresource.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
        imageBlit.srcSubresource.mipLevel = i - 1;
        imageBlit.srcSubresource.baseArrayLayer = 0;
        imageBlit.srcSubresource.layerCount = 1;
        imageBlit.dstOffsets[0] = { 0, 0, 0 };
        imageBlit.dstOffsets[1] = { mipWidth > 1 ? mipWidth / 2 : 1, mipHeight > 1 ? mipHeight / 2 : 1, 1 };
        imageBlit.dstSubresource.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
        imageBlit.dstSubresource.mipLevel = i;
        imageBlit.dstSubresource.baseArrayLayer = 0;
        imageBlit.dstSubresource.layerCount = 1;

        vkCmdBlitImage(cmd,
                       image, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
                       image, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
                       1, &imageBlit, filterMethod);

        barrier.oldLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;
        barrier.newLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
        barrier.srcAccessMask = VK_ACCESS_TRANSFER_READ_BIT;
        barrier.dstAccessMask = VK_ACCESS_SHADER_READ_BIT;

        vkCmdPipelineBarrier(cmd,
                             VK_PIPELINE_STAGE_TRANSFER_BIT, VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT, 0,
                             0, nullptr,
                             0, nullptr,
                             1, &barrier);

        if (mipWidth > 1) mipWidth /= 2;
        if (mipHeight > 1) mipHeight /= 2;
    }

    commands::EndSingleTimeCommands(vk, cmd);
}


void lvk::textures::TransitionImageLayout(VkState& vk, VkImage image, VkFormat format, uint32_t numMips, VkImageLayout oldLayout, VkImageLayout newLayout)
{
    VkCommandBuffer commandBuffer = commands::BeginSingleTimeCommands(vk);

    VkImageMemoryBarrier barrier{};
    barrier.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
    barrier.oldLayout = oldLayout;
    barrier.newLayout = newLayout;

    barrier.srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
    barrier.dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;

    barrier.image = image;
    barrier.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
    barrier.subresourceRange.baseMipLevel = 0;
    barrier.subresourceRange.levelCount = numMips;
    barrier.subresourceRange.baseArrayLayer = 0;
    barrier.subresourceRange.layerCount = 1;

    VkPipelineStageFlags sourceStage;
    VkPipelineStageFlags destinationStage;
    if (newLayout == VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL) {
        barrier.subresourceRange.aspectMask = VK_IMAGE_ASPECT_DEPTH_BIT;

        if (utils::HasStencilComponent(format)) {
          barrier.subresourceRange.aspectMask |= VK_IMAGE_ASPECT_STENCIL_BIT;
        }
    }
    else {
        barrier.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
    }

    if (oldLayout == VK_IMAGE_LAYOUT_UNDEFINED && newLayout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL) {
        barrier.srcAccessMask = 0;
        barrier.dstAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;

        sourceStage = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;
        destinationStage = VK_PIPELINE_STAGE_TRANSFER_BIT;
    }
    else if (oldLayout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL && newLayout == VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL) {
        barrier.srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;
        barrier.dstAccessMask = VK_ACCESS_SHADER_READ_BIT;

        sourceStage = VK_PIPELINE_STAGE_TRANSFER_BIT;
        destinationStage = VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
    }
    else if (oldLayout == VK_IMAGE_LAYOUT_UNDEFINED && newLayout == VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL) {
        barrier.srcAccessMask = 0;
        barrier.dstAccessMask = VK_ACCESS_SHADER_READ_BIT;

        sourceStage = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;
        destinationStage = VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
    }
    else if (oldLayout == VK_IMAGE_LAYOUT_UNDEFINED && newLayout == VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL) {
        barrier.srcAccessMask = 0;
        barrier.dstAccessMask = VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;

        sourceStage = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;
        destinationStage = VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT;
    }
    else {
        spdlog::error("Unsupported barrier transition.");
        return;
    }

    vkCmdPipelineBarrier(commandBuffer,
                         sourceStage, destinationStage,
                         0, /* Dependencies*/
                         0, /* Memory Barrier Count*/
                         nullptr, /* ptr to memory barriers*/
                         0, /* buffer memory barrier count*/
                         nullptr, /* Buffer memory barriers*/
                         1,  /* Image Memory barrier count*/
                         &barrier
    );

    commands::EndSingleTimeCommands(vk, commandBuffer);
}

void lvk::textures::CopyBufferToImage(VkState& vk, VkBuffer& src, VkImage& image, uint32_t width, uint32_t height)
{
    VkCommandBuffer commandBuffer = commands::BeginSingleTimeCommands(vk);

    VkBufferImageCopy region{};
    region.bufferOffset = 0;
    region.bufferRowLength = 0;
    region.bufferImageHeight = 0;

    region.imageSubresource.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
    region.imageSubresource.mipLevel = 0;
    region.imageSubresource.baseArrayLayer = 0;
    region.imageSubresource.layerCount = 1;

    region.imageOffset = { 0, 0, 0 };
    region.imageExtent = {
        width,
        height,
        1
    };

    vkCmdCopyBufferToImage(commandBuffer, src, image, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &region);

    commands::EndSingleTimeCommands(vk, commandBuffer);
}
void lvk::textures::CreateFramebuffer(lvk::VkState &vk,
                            lvk::Vector<VkImageView> &attachments,
                            VkRenderPass renderPass, VkExtent2D extent,
                            VkFramebuffer &framebuffer) {
    VkFramebufferCreateInfo framebufferCreateInfo{};
    framebufferCreateInfo.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
    framebufferCreateInfo.attachmentCount = static_cast<uint32_t>(attachments.size());
    framebufferCreateInfo.pAttachments = attachments.data();
    framebufferCreateInfo.layers = 1;
    framebufferCreateInfo.renderPass = renderPass;
    framebufferCreateInfo.height = extent.height;
    framebufferCreateInfo.width = extent.width;

    VK_CHECK (vkCreateFramebuffer(vk.m_LogicalDevice, &framebufferCreateInfo, nullptr, &framebuffer) != VK_SUCCESS)
}
